mains =
  [
    do putStrLn (show "Hello World!"),
    do putStrLn (show (5+(-1))),
    do putStrLn (show (True && False || (not True))),
    do putStrLn (show ("a"=="a")),
    do putStrLn (show ("a"/="a")),
    do putStrLn (show (succ 6)),
    do putStrLn (show (min 6 8)),
    do putStrLn (show (max 6 8)),
    do putStrLn (show (div 92 10)),
    do putStrLn (show (92 `div` 10)),
    do let foo x = x + x in putStrLn (show (foo 10)),
    do let foo x = if x `mod` 2 == 0 then x `div` 2 else 3*x+1 in putStrLn (show (foo 10)),
    do putStrLn (show [1,3,5,7]),
    do putStrLn (show ("Hello"++(((' ':[])!!0):"World!"))),
    do putStrLn (show ("Hello"++(((' ':[])!!0):"World!"))),
    do putStrLn (show [[1],[2,3]]),
    do putStrLn (show ([1]<=[2,3])),
    do putStrLn (show (head "Hello World!")),
    do putStrLn (show (tail "Hello World!")),
    do putStrLn (show (last "Hello World!")),
    do putStrLn (show (init "Hello World!")),
    do putStrLn (show (length "Hello World!")),
    do putStrLn (show (null "")),
    do putStrLn (show (reverse "vercingetorix")),
    do putStrLn (show (take 5 "vercingetorix")),
    do putStrLn (show (drop 5 "vercingetorix")),
    do putStrLn (show (maximum "vercingetorix")),
    do putStrLn (show (minimum "vercingetorix")),
    do putStrLn (show (sum (1:2:3:4:[]))),
    do putStrLn (show (product (1:2:3:4:[]))),
    do putStrLn (show (elem 'x' "vercingetorix")),
    do putStrLn (show [2..20]),
    do putStrLn (show [2,5..20]),
    do putStrLn (show [20,18..1]),
    do putStrLn (show (take 24 [0,11..])),
    do putStrLn (show (take 24 (cycle "hello"))),
    do putStrLn (show (take 24 (repeat 'm'))),
    do putStrLn (show (replicate 24 'm')),
    do putStrLn (show (succ 'a')),
    do putStrLn (show [succ x | x <- "vercingetorix"]),
    do putStrLn (show [succ x | x <- "vercingetorix", x `elem` "aeiouy"]),
    do putStrLn (show [x:y:"" | x <- "vercingetorix", y <- "aeiouy", x==y]),
    do putStrLn (show [x:y:"" | x <- "vercingetorix", y <- "aeiouy", x==y]),
    do putStrLn (show (1,"a")),
    do putStrLn (show (fst (1,"a"))),
    do putStrLn (show (snd (1,"a"))),
    do putStrLn (show (zip [1..5] "abcde"))
  ]

main :: IO ()
main = sequence_ mains